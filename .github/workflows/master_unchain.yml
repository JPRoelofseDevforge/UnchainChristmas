# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - unchain

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Prune devDependencies
        run: npm prune --omit=dev

      - name: Prepare release artifact
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release | Out-Null
          Copy-Item -Recurse -Force .next -Destination release/.next
          Copy-Item -Force package.json -Destination release/package.json
          if (Test-Path next.config.js) { Copy-Item -Force next.config.js -Destination release/next.config.js }
          Copy-Item -Force server.js -Destination release/server.js
          if (Test-Path web.config) { Copy-Item -Force web.config -Destination release/web.config }
          if (Test-Path public) {
            New-Item -ItemType Directory -Force -Path release/public | Out-Null
            Copy-Item -Recurse -Force ./public/* -Destination release/public
          }
          Copy-Item -Recurse -Force node_modules -Destination release/node_modules

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: release
          path: ./release

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_0F51420907884AC8AFBE29FAB1F8FF79 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_525774C0F7604DE2AB2A29978073835E }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6662A528EDA84EAE90F517A38FD5A084 }}

      # Ensure correct runtime, pin Node to 18.x, and force Prisma to binary engines (Windows/Linux supported)
      - name: Configure App Service runtime and app settings
        uses: azure/cli@v1
        with:
          inlineScript: |
            set -e
            APP_NAME="unchain"
            RG=$(az webapp list --query "[?name=='$APP_NAME'].resourceGroup" -o tsv)
            if [ -z "$RG" ]; then
              echo "Resource group not found for app $APP_NAME"
              exit 1
            fi
            echo "Using resource group: $RG"

            # Detect Linux vs Windows to apply platform-specific settings
            KIND=$(az webapp show --name "$APP_NAME" -g "$RG" --query kind -o tsv || echo "")
            if echo "$KIND" | grep -qi linux; then
              echo "Linux App Service detected; skipping Windows-only worker process setting"
            else
              # Windows: ensure 64-bit worker process
              az webapp config set -g "$RG" -n "$APP_NAME" --use-32bit-worker-process false
            fi
      - name: Disable Authentication and apply runtime/app settings
        uses: azure/cli@v1
        with:
          inlineScript: |
            set -e
            APP_NAME="unchain"
            RG="${{ secrets.AZURE_RESOURCE_GROUP }}"
            if [ -z "$RG" ]; then
              RG=$(az webapp list --query "[?name=='$APP_NAME'].resourceGroup" -o tsv)
            fi
            if [ -z "$RG" ]; then
              echo "Resource group not found for app $APP_NAME. Set AZURE_RESOURCE_GROUP secret."
              exit 1
            fi
            echo "Using resource group: $RG"

            echo "Current auth settings (before):"
            az webapp auth show -g "$RG" -n "$APP_NAME" || true

            # Disable App Service Authentication (v2 first, fallback to legacy)
            if az webapp auth update -g "$RG" -n "$APP_NAME" --enabled false >/dev/null 2>&1; then
              echo "Disabled App Service Authentication (auth v2)."
            else
              az webapp auth set -g "$RG" -n "$APP_NAME" --enabled false
              echo "Disabled App Service Authentication (legacy)."
            fi

            # Also disable legacy setting via app settings for safety
            az webapp config appsettings set -g "$RG" -n "$APP_NAME" --settings WEBSITE_AUTH_ENABLED=false

            # Ensure client certificate requirement is disabled
            az webapp update -g "$RG" -n "$APP_NAME" --set clientCertEnabled=false

            # Detect Linux vs Windows to apply platform-specific settings
            KIND=$(az webapp show --name "$APP_NAME" -g "$RG" --query kind -o tsv || echo "")
            if echo "$KIND" | grep -qi linux; then
              echo "Linux App Service detected; skipping Windows-only worker process setting"
            else
              # Windows: ensure 64-bit worker process
              az webapp config set -g "$RG" -n "$APP_NAME" --use-32bit-worker-process false
            fi

            # App settings to pin Node and control Kudu build behavior + Prisma engine mode, and set production env
            az webapp config appsettings set -g "$RG" -n "$APP_NAME" --settings \
              WEBSITE_NODE_DEFAULT_VERSION=18.20.7 \
              SCM_DO_BUILD_DURING_DEPLOYMENT=false \
              SCM_SKIP_NODE_MODULES_INSTALL=true \
              WEBSITE_RUN_FROM_PACKAGE=1 \
              PRISMA_CLIENT_ENGINE_TYPE=binary \
              PRISMA_CLI_QUERY_ENGINE_TYPE=binary \
              NODE_ENV=production

            echo "Auth settings (after):"
            az webapp auth show -g "$RG" -n "$APP_NAME" || true


      - name: Ensure public access (allow all networks)
        uses: azure/cli@v1
        with:
          inlineScript: |
            set -e
            APP_NAME="unchain"
            RG="${{ secrets.AZURE_RESOURCE_GROUP }}"
            if [ -z "$RG" ]; then
              RG=$(az webapp list --query "[?name=='$APP_NAME'].resourceGroup" -o tsv)
            fi
            if [ -z "$RG" ]; then
              echo "Resource group not found for app $APP_NAME. Set AZURE_RESOURCE_GROUP secret."
              exit 1
            fi

            echo "Current access restrictions:"
            az webapp config access-restriction show -g "$RG" -n "$APP_NAME" || true

            echo "Adding wide allow rules (IPv4/IPv6) for app and SCM..."
            az webapp config access-restriction add -g "$RG" -n "$APP_NAME" --rule-name AllowAllIPv4 --priority 100 --action Allow --ip-address 0.0.0.0/0 || true
            az webapp config access-restriction add -g "$RG" -n "$APP_NAME" --rule-name AllowAllIPv6 --priority 110 --action Allow --ip-address ::/0 || true
            az webapp config access-restriction add -g "$RG" -n "$APP_NAME" --rule-name AllowAllIPv4-SCM --priority 100 --action Allow --ip-address 0.0.0.0/0 --scm-site true || true
            az webapp config access-restriction add -g "$RG" -n "$APP_NAME" --rule-name AllowAllIPv6-SCM --priority 110 --action Allow --ip-address ::/0 --scm-site true || true

      - name: Restart App Service to apply settings
        uses: azure/cli@v1
        with:
          inlineScript: |
            APP_NAME="unchain"
            RG=$(az webapp list --query "[?name=='$APP_NAME'].resourceGroup" -o tsv)
            if [ -z "$RG" ]; then
              echo "Resource group not found for app $APP_NAME"
              exit 1
            fi
            az webapp restart -g "$RG" -n "$APP_NAME"

      - name: Skip duplicate configuration
        run: echo "Skipping duplicate App Service config step"
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'unchain'
          slot-name: 'Production'
          package: ./release
          